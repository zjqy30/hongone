<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hone.dao.HoUserBasicDao">

    <resultMap id="hoUserBasicResultMap" type="com.hone.entity.HoUserBasic">
        <id column="id" property="id"/> 
        <result column="open_id" property="openId"/> 
        <result column="wx_name" property="wxName"/> 
        <result column="user_type" property="userType"/> 
        <result column="if_approved" property="ifApproved"/> 
        <result column="id_card_pic" property="idCardPic"/> 
        <result column="id_card_up_pic" property="idCardUpPic"/> 
        <result column="id_card_down_pic" property="idCardDownPic"/> 
        <result column="marketer_id" property="marketerId"/> 
        <result column="phone_no" property="phoneNo"/> 
        <result column="has_shop" property="hasShop"/> 
        <result column="id_card_number" property="idCardNumber"/> 
        <result column="encrypted_data" property="encryptedData"/> 
        <result column="gender" property="gender"/> 
        <result column="avatar_url" property="avatarUrl"/> 
        <result column="country" property="country"/> 
        <result column="age" property="age"/> 
        <result column="create_date" property="createDate"/> 
        <result column="update_date" property="updateDate"/> 
        <result column="enable_flag" property="enableFlag"/> 

        
        
    </resultMap>

    <sql id="hoUserBasicColumns">
        a.id AS "id",
        a.open_id AS "openId",
        a.wx_name AS "wxName",
        a.user_type AS "userType",
        a.if_approved AS "ifApproved",
        a.id_card_pic AS "idCardPic",
        a.id_card_up_pic AS "idCardUpPic",
        a.id_card_down_pic AS "idCardDownPic",
        a.marketer_id AS "marketerId",
        a.phone_no AS "phoneNo",
        a.has_shop AS "hasShop",
        a.id_card_number AS "idCardNumber",
        a.encrypted_data AS "encryptedData",
        a.gender AS "gender",
        a.avatar_url AS "avatarUrl",
        a.country AS "country",
        a.age AS "age",
        a.create_date AS "createDate",
        a.update_date AS "updateDate",
        a.enable_flag AS "enableFlag"
    </sql>

    <sql id="hoUserBasicJoins">
        
    </sql>

    <update id="updateLogin">
        update ho_user_basic set
        wx_name=#{wxName},
        avatar_url=#{avatarUrl},
        country=#{country},
        gender=#{gender},
        update_date=#{updateDate}
        where id=#{id}
    </update>

    <select id="findUniqueByProperty" resultType="com.hone.entity.HoUserBasic" statementType="STATEMENT">
        select <include refid="hoUserBasicColumns"></include> FROM ho_user_basic a  where a.${propertyName} = '${value}'
    </select>


    <select id="starSelfInfo" resultType="com.hone.applet.repo.HoUserStarSelfInfo">
        select
        a.id as 'id',
        a.open_id as 'openId',
        b.platform_id as 'platFormId',
        d.dict_value  as 'platFormName',
        b.fans_nums as 'fansNums',
        a.age as 'age',
        b.thumb_up_nums as 'thumbUpNums',
        b.work_nums as 'workNums',
        a.has_shop as 'hasShop',
        b.personal_imgs as 'personalImgs',
        b.platform_imgs as 'platformImgs',
        z.tagIds as 'tagIds'

        from ho_user_basic a
        left join ho_user_star b on a.id=b.user_id
        left join ho_dict d on d.id=b.platform_id
        left join (
        select user_id as 'userId',GROUP_CONCAT(dict_id) as 'tagIds'
        from ho_user_tag where user_id=#{userId} group by user_id
        )z on z.userId=a.id
        where a.id=#{userId} and a.open_id=#{openId}
    </select>


</mapper>